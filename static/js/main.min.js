document.addEventListener('DOMContentLoaded', function() {
    const searchBtn = document.getElementById('search-btn');
    const videosContainer = document.getElementById('videos-container');
    const knowledgeLevel = document.getElementById('knowledge-level');
    const topic = document.getElementById('topic');

    searchBtn.addEventListener('click', function() {
        const level = knowledgeLevel.value;
        const query = topic.value.trim();
    
        if (query === '') {
            alert('Please enter a topic to search.');
            return;
        }
    
        const suggestedQuery = getSuggestedQuery(level, query);
    
        async function computeRelevance(query, videoDescription) {
            try {
                const response = await fetch('/relevance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query: query, video_description: videoDescription })
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Error response from server:', errorText);
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                return data.relevance_score;
            } catch (error) {
                console.error('Error computing relevance:', error);
                return null;
            }
        }
    
        async function fetchVideos(query) {
            try {
                const response = await fetch(`/search?query=${encodeURIComponent(query)}`);
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Error response from search server:', errorText);
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
    
                const relevantVideos = [];
                for (const item of data.items) {
                    const videoDescription = `${item.snippet.title} ${item.snippet.description}`;
                    const relevanceScore = await computeRelevance(query, videoDescription);
                    if (relevanceScore !== null && relevanceScore >= 0.75) {
                        relevantVideos.push(item);
                    }
                }
    
                displayVideos(relevantVideos);
            } catch (error) {
                console.error('Error fetching videos:', error);
                alert('Failed to fetch videos. Please try again later.');
            }
        }
    
        fetchVideos(suggestedQuery);
    });

    
    function getSuggestedQuery(level, query) {
        switch (level) {
            case 'scratch':
                return `${query} roadmap to learn it`;
            case 'beginner':
                return `${query} for beginners`;
            case 'intermediate':
                return `implementing ${query} course for intermediate`;
            case 'advanced':
                return `advanced techniques for ${query}`;
            default:
                return `${query} videos`;
        }
    }

    function displayVideos(videos) {
        videosContainer.innerHTML = ''; 

        videos.forEach(function(video) {
            const videoCard = createVideoCard(video);
            videosContainer.appendChild(videoCard);
        });
    }

    function createVideoCard(video) {
        const videoId = video.id.videoId;
        const videoTitle = video.snippet.title;
        const videoThumbnail = video.snippet.thumbnails.medium.url;
        const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;

        const videoCard = document.createElement('div');
        videoCard.classList.add('video-card');

        const videoLink = document.createElement('a');
        videoLink.href = videoUrl;
        videoLink.target = '_blank';
        videoLink.rel = 'noopener noreferrer';

        const thumbnailImg = document.createElement('img');
        thumbnailImg.src = videoThumbnail;
        thumbnailImg.alt = videoTitle;

        const infoDiv = document.createElement('div');
        infoDiv.classList.add('info');

        const titleHeading = document.createElement('h2');
        titleHeading.textContent = videoTitle;

        const channelParagraph = document.createElement('p');
        channelParagraph.textContent = `Channel: ${video.snippet.channelTitle}`;

        infoDiv.appendChild(titleHeading);
        infoDiv.appendChild(channelParagraph);

        videoLink.appendChild(thumbnailImg);
        videoCard.appendChild(videoLink);
        videoCard.appendChild(infoDiv);

        return videoCard;
    }
});
